#!/usr/bin/env python3 
# album-tools 
# (c) 2025 J. Adams jfa63[at]duck[dot]com  
# Released under the Two-clause BSD License    
#
# Colours: 
# pale yellow #f5d676 
# dark burnt red #681c2c 
__version__ = '0.1.7'
__author__ = "J. Adams jfa63[at]duck[dot]com"

import glob
import os
import re
import readline
import shutil
import subprocess as proc
#import sys
from datetime import datetime
from rich import print
import requests
from tqdm import tqdm
import matplotlib.pyplot as plt
import yt_dlp
from yt_dlp.utils import DownloadError
from mutagen.oggvorbis import OggVorbis
from mutagen.easyid3 import EasyID3



### ---------------- User settings  
# Set 'music_root' to your music collection top-level directory. 
music_root = "/Music/"
# Set paths to your shell and `ffmpeg`
SHELL = '/usr/bin/bash'
FFMPEG = '/usr/bin/ffmpeg'
# Set prefered bit-rate and encoding 
BITRATE = '192' # 128, 192, 256. ... 
CODEC = 'vorbis' # 'vorbis' or 'mp3' 
### ----------------

## Some needed global settings 
music = os.path.basename(os.path.normpath(music_root))
os.chdir(music_root)
tmp_dir = f"{music_root}tmp/"
# To be striped from filenames  !"#$%&'()*+,/:;<=>?@[\]^`{|}~ 
disallowed_chars = re.compile(r"[^\w\s.-]")



## Helper Functions 
def completer(text, state):
    """
    Function for readline to handle filename completion 
    """
    # Expand user home (~) and environment variables
    text = os.path.expanduser(os.path.expandvars(text))
    # Append '*' to match files/directories starting with 'text'
    matches = glob.glob(text + '*')
    # Append '/' to directories  
    matches = [match + '/' if os.path.isdir(match) else match for match in matches]
    try:
        return matches[state]
    except IndexError:
        return None
# End completer() 

# Register completer function
readline.set_completer(completer)
# Use the tab key for completion
readline.parse_and_bind('tab: complete')


def get_files_in_dir(directory: str) -> list:
    """
    Returns a list of filenames in {directory}
    """
    file_list = []

    for root, dirs, files in os.walk(directory):
        for file in files:
            file_list.append(os.path.join(root, file))
    file_list.sort()
    return file_list
# End get_files_in_dir() 


def check_dir_exists(directory: str) -> bool:
    """
    Does {directory} exist?
    """
    return os.path.isdir(directory)
# End check_dir_exists() 


def get_unique_dates(dates: list) -> int:
    """
    Returns the number of unique dates for the histogram
    """
    unique_dates = set(dates)
    return len(unique_dates) 
# End get_unique_dates() 


def get_all_dates(directory: str) -> dict:
    """
    Returns a dictionary of file:date tags from all files in {directory}
    """
    files = get_files_in_dir(directory)
    dates = {}
    
    for file in files:
        _, ext = os.path.splitext(file)
        ext = ext.lower()
        f = os.path.basename(file)

        if ext in ('.ogg', '.mp3'):
            try:
                if ext == '.ogg':
                    meta = OggVorbis(file)
                elif ext == '.mp3':
                    meta = EasyID3(file)
                if 'date' in meta and meta['date'] and meta['date'][0].strip():
                    try:
                        dates[file] = int(meta['date'][0])
                    except ValueError:
                        print(f"[yellow]Warning: Non-numeric date in {f}: {meta['date'][0]} â€” skipping file.[/yellow]")
                else:
                    print(f"[yellow]Warning: No date found in {f}, skipping.[/yellow]")
            except Exception as e:
                print(f"[bold red]Error. Unable to read Date field in\n{f} [/bold red]")
                input(f"{e}")
                continue

    return dates
# End get_all_dates() 


def set_all_dates(directory: str, newdate: str):
    """
    Sets the date tag on all files in {directory}
    """
    files = get_files_in_dir(directory)

    for file in files:
        _, ext = os.path.splitext(file)
        ext = ext.lower()
        f = os.path.basename(file)

        if ext in ('.ogg', '.mp3'):
            try:
                if ext == '.ogg':
                    meta = OggVorbis(file)
                elif ext == '.mp3':
                    meta = EasyID3(file)

                meta['date'] = [newdate]
                meta.save()
                print("Re-wrote:")
                print(f"[#f5d676]{f}[/#f5d676]")
                print("")

            except Exception as e:
                print(f"[red]Error processing {f}:[/red] {e}")
# End set_all_dates() 


def set_all_common(directory: str):
    """
    Set the common tags for the whole album directory.
    """

    files = get_files_in_dir(directory)
    artist = input("Artist's/band's name: ")
    album = input("Album name: ")
    albumartist = input("Album artist: 'ENTER' to use artist's name, or type in different name: ")
    date = input("Recording/release date: ")
    genre = input("Genre: ")

    if albumartist == '':
        albumartist = artist

    name = os.path.basename(directory)

    print(f"\nDo you want to write the following tags to all files in {name}?")
    print(f"Artist/Band: {artist}")
    print(f"Album name: {album}")
    print(f"Album Artist: {albumartist}")
    print(f"Date: {date}")
    print(f"Genre: {genre}")
    print("[[green]Y[/green]/n]")
    ans = input()

    if ans.lower() in ('n', 'no'):
        return
    else:
        for file in files:
            _, ext = os.path.splitext(file)
            ext = ext.lower()
            f = os.path.basename(file)

            if ext in ('.ogg', '.mp3'):
                try:
                    if ext == '.ogg':
                        meta = OggVorbis(file)
                    elif ext == '.mp3':
                        meta = EasyID3(file)

                    meta['artist'] = [artist]
                    meta['album'] = [album]
                    meta['albumartist'] = [albumartist]
                    meta['date'] = [date]
                    meta['genre'] = [genre]
                    meta.save()
                    print("Re-wrote:")
                    print(f"[#f5d676]{f}[/#f5d676]")
                    print("")
                except Exception as e:
                    print(f"[red]Error processing {f}:[/red] {e}")
# End set_all_common() 


def get_album_cover(directory: str, file_name: str, url: str):
    """
    Download a file such as an album cover
    """

    try:
        response = requests.get(url, stream=True)
        response.raise_for_status()
        total_size = int(response.headers.get('content-length', 0))
        file_path = os.path.join(directory, file_name)
        os.makedirs(directory, exist_ok=True)
        with open(file_path, 'wb') as f, tqdm(total=total_size, unit='B',
                                              unit_scale=True, desc=file_name) as pbar:
            for chunk in response.iter_content(chunk_size=8192):
                if chunk:
                    f.write(chunk)
                    pbar.update(len(chunk))
    except requests.RequestException as e:
        print(f"Error downloading [bold]{url}[/bold]: {e}")
    except Exception as e:
        print(e)
# End get_album_cover() 


def do_yt_dlp(url: str, output_template: str = "%(playlist_index)02d %(title)s.%(ext)s",
              quality: str = BITRATE, ffmpeg_location: str = FFMPEG) -> dict:
    """
    Download an album or track with yt-dlp
    """

    ydl_opts = {
        "format": "bestaudio/best",
        "outtmpl": output_template,
        "writethumbnail": True,
        "ignore-errors": True,
        **({"ffmpeg_location": ffmpeg_location} if ffmpeg_location else {}),
        "postprocessors": [
            {
                "key": "FFmpegExtractAudio",
                "preferredcodec": CODEC,
                "preferredquality": quality,
            },
            {
                "key": "FFmpegMetadata",
            },
        ],
        "retries": 10
    }

    with yt_dlp.YoutubeDL(ydl_opts) as ydl:
        try:
            info: dict = ydl.extract_info(url, download=True)
        except DownloadError as e:
            print(f"[red]yt_dlp failed to process most or all of the playlist or track for URL:\n{url}[/red]\nReason: {e}")
            return None

        # Filter out None entries if this is a playlist
        if info and 'entries' in info and isinstance(info['entries'], list):
            info['entries'] = [e for e in info['entries'] if e]
        return info
    # End with 
# End do_yt_dlp() 


def set_tracknum(directory: str):
    """
    Sets the tracknumber tag on all files in {directory}
    """
    files = get_files_in_dir(directory)

    for file in files:
        fullpath, ext = os.path.splitext(file)
        basename = os.path.basename(fullpath)
        ext = ext.lower()
        track_num = basename[:2]
        # album image often starts with '00', skip 
        if track_num == '00':
            continue
        # Check that first two characters are digits 
        match = re.match(r'^(\d{2})', basename)
        # If so, write tracknumber tag 
        if match and ext in ('.ogg', '.mp3'):        
            try:
                if ext == '.ogg':
                    meta = OggVorbis(file)
                elif ext == '.mp3':
                    meta = EasyID3(file)

                meta['tracknumber'] = [track_num]
                meta.save()

            except Exception as e:
                print(f"[red]Error processing {file}:[/red] {e}")
# End set_tracknum() 


def build_histogram(dates: list):
    """
    Writes a .png histogram for all unique dates in /Music/
    """
    unique = get_unique_dates(dates)
    #N_points = unique//2
    n_bins = unique

    fig, axs = plt.subplots(figsize=(5, 5), layout='constrained')
    axs.hist(dates, bins=n_bins)
    axs.set_xlabel("Album Years")
    #plt.show()
    stamp = datetime.now().replace(microsecond=0).isoformat().replace('-','').replace(':','')
    plt.savefig(music_root+'music_collection_dates-'+stamp+'.png')
# End build_histogram() 


def scrub_dirs(root_dir: str):
    """
    Removes illegal characters from directory names.
    """
    for dirpath, dirnames, _ in os.walk(root_dir, topdown=False):
        for dirname in dirnames:
            if "thumbnails" in dirname:
                continue
            clean_name = disallowed_chars.sub('', dirname) 
            suggested_new_name = clean_name.replace(' ', '_')
            
            if suggested_new_name != dirname: # Check if not same name 
                old_path = os.path.join(dirpath, dirname)
                new_path = os.path.join(dirpath, suggested_new_name)

                print(f"\nOld directory name: {old_path}")
                print(f"Suggested new name: {new_path}")

                user_input = input("Press Enter to accept, type a new name, or type 'skip' to leave unchanged: ").strip()

                if user_input.lower() == 'skip':
                    continue
                elif user_input:
                    new_path = os.path.join(dirpath, user_input)

                try:
                    os.rename(old_path, new_path)
                    print(f"[green]Renamed:[/green] [cyan]{old_path} â†’ {new_path}[/cyan]")
                except Exception as e:
                    print(f"[red]Error renaming {old_path}:[/red] {e}")
# End scrub_dirs() 


def scrub_filenames(a_dir: str):
    """
    Removes illegal characters from filenames
    """
    for path, dirs, files in os.walk(a_dir):
        for file in files:
            # Let's replace '(' and ')'  with  a  '-'   
            o_name = file.replace('(','-').replace(')','-')
            # Scrub 
            clean_name = disallowed_chars.sub('', o_name) 
            # replace spaces  with '_' 
            suggested_new_name = clean_name.replace(' ', '_')
            
            if suggested_new_name != file:
                old_name = os.path.join(path, file)
                old_short = os.path.basename(old_name)
                new_name = os.path.join(path, suggested_new_name)
                new_short = os.path.basename(new_name)

                try:
                    os.rename(old_name, new_name)
                    print(f"[green]Renamed:[/green] [#f5d676]{old_short} â†’ {new_short}[/#f5d676]")
                except Exception as e:
                    print(f"[red]Error renaming {old_short}[/red]: {e}")
# End scrub_filenames() 


def open_shell(cwd):
    """
    Open an interactive shell in cwd.
    """

    os.chdir(cwd)
    # Launch an interactive shell in the current working directory
    cmd = [SHELL, '-i']
    try:
        proc.run(cmd, check=True)
    except FileNotFoundError:
        print(f"[bold red]Shell executable not found[/bold red]: [cyan]{SHELL}[/cyan]")
    except PermissionError:
        print(f"[bold red]Permission denied[/bold red] when launching: [cyan]{SHELL}[/cyan]")
    except proc.CalledProcessError as e:
        print(f"[bold yellow]Shell exited with code[/bold yellow] [magenta]{e.returncode}[/magenta]")
    except Exception as e:
        print(f"[bold red]Unexpected error launching shell[/bold red]: [white]{e}[/white]")
    # Pause so the user can read the error before the menu clears  
    print("[bold green]Enter to return to the menu[/bold green]")
    input()
# End open_shell() 


## main 
def main():

    os.system('clear')
    print(f"[bold #f5d676]Welcome to Album Tools v{__version__}![/bold #f5d676]\n")
    print(f"Enter album directory name, or hit [bold green]'ENTER'[/bold green] for [cyan]{music}[/cyan]")
    name = input("Directory: ")
    full_name = music_root+name

    if not check_dir_exists(full_name):
        print(f"[cyan]{name}[/cyan] does not exist. Using [cyan]{music}[/cyan]")
        name = ''
        full_name = music_root

    # Menu loop 
    while True:
        os.system('clear')
        print(f"[bold #f5d676]Album Tools v{__version__}[/bold #f5d676]\n")
        print("Choose:")
        print(f" [bold #f5d676]1[/bold #f5d676] = List files in [cyan]{name}[/cyan] directory")
        print(f" [bold #f5d676]2[/bold #f5d676] = Get dates for all tracks in [cyan]{name}[/cyan] directory")
        print(f" [bold #f5d676]3[/bold #f5d676] = Set date on all tracks in [cyan]{name}[/cyan] directory")
        print(" [bold #f5d676]4[/bold #f5d676] = Set common tags for current album")
        print(f" [bold #f5d676]5[/bold #f5d676] = Create new directory in [cyan]{music}/[/cyan]")
        print(" [bold #f5d676]6[/bold #f5d676] = Download album or track")
        print(" [bold #f5d676]7[/bold #f5d676] = Download album cover or other file")
        print(f" [bold #f5d676]8[/bold #f5d676] = Change directory in [cyan]{music}/[/cyan]")
        print(f" [bold #f5d676]9[/bold #f5d676] = Scrub all directory names in [cyan]{music}/[/cyan]")
        print(f"[bold #f5d676]10[/bold #f5d676] = Scrub all filenames in [cyan]{name}[/cyan] directory")
        #print("[bold #f5d676]11[/bold #f5d676] = Generate date histogram for collection")
        print("[bold #f5d676]sh[/bold #f5d676] = Open shell") 
        print(" [bold #f5d676]q[/bold #f5d676] = Quit\n")

        action = input(f"{music}/{name}> ")

        if action == '1':
            # List files in dir 
            # #f5d676 = pale yellow 
            ls = get_files_in_dir(full_name)
            print("")
            print(f"[bold blue]{len(ls)} files in {name}:[/bold blue]")
            for file in ls:
                f = os.path.basename(file)
                print(f"[#f5d676]{f}[/#f5d676]")
            print("[bold green]\nENTER to continue[/bold green]")
            input()

        elif action == '2':
            # List dates for all tracsk in dir 
            all_dates = get_all_dates(full_name)
            print(f"[bold blue]\nDates in {music}/{name}[/bold blue]")
            for file, date in all_dates.items():
                f = os.path.basename(file)
                print(f"[bold white]{date}: [/bold white] [#f5d676]{f}[/#f5d676]")
            print("[bold green]\nENTER to continue[/bold green]")
            input()

        elif action == '3':
            # Set dates on all tracks 
            if full_name == music_root:
                print("[bold red]Don't change the dates of all files in /Music/![/bold red]")
                print("[bold green]\nENTER to go back to menu[/bold green]")
                input()
                continue
            new = input("Enter new date (YYYY): ")
            print(f"You have chosen to change this album's date to {new}")
            print("[bold]Continue?[/bold] [[green]Y[/green]/n]")
            ans = input()
            if ans.lower() in ('n', 'no'):
                continue
            else:
                print(f"Changing dates in {music}/{name}")
                set_all_dates(full_name, new)
                all_dates = get_all_dates(full_name)
                print(f"All dates in {name} changed to {new}.")
                print("[bold green]\nENTER to continue[/bold green]")
                input()

        elif action == '4':
            # Set common tags 
            set_all_common(full_name)
            print("[bold green]\nENTER to continue[/bold green]")
            input()

        elif action == '5':
            # Make new dir 
            print(f"Create a new directory under [cyan]{music}[/cyan]")
            dirname = input("New directory name: ")
            fulldir = f"{music_root}/{dirname}"
            print("[bold]Create?[/bold]")
            print('[[green]Y[/green]/n]')
            ans = input()

            if ans.lower() in ('n', 'no'):
                continue
            else:
                os.makedirs(fulldir, exist_ok=True)
                print(f"\n[bold green]Created[/bold green] [bold cyan]{fulldir}[/bold cyan], [bold green]ENTER to continue[/bold green]")
                input()

        elif action == '6':
            # Download album or track
            url = input("Album URL: ")
            print(f"Download album to [cyan]{music}/tmp/[/cyan]?")
            print("[[bold green]Y[/bold green]/n]")
            ans = input('')

            if ans.lower() in ('n', 'no'):
                continue
            else:
                os.makedirs(f"{music_root}tmp/", exist_ok=True)
                os.chdir(tmp_dir)
                print("[bold green]Downloading...[/bold green]")
                do_yt_dlp(url)
                # Set tracknumber in ID3 metadata
                print("\n[bold #f5d676]Setting track number ID3 tags[/bold #f5d676]")
                set_tracknum(tmp_dir)
                print("[bold green]\nAlbum download complete. ENTER to continue[/bold green]")
                input()

            # Move dloaded files into album directory
            print("Do you wish create an album directory for these downloaded files?")
            print("[[green]Y[/green]/n]")
            # Make all dirs under music_root visible 
            os.chdir(music_root)
            move_files = input()

            if move_files.lower() in ("no", "n"):
                print(f"[bold cyan]Leaving downloaded files in {tmp_dir}[/bold cyan]")
                continue
            else:
                target_dir = input("\nName of directory to which the files will be moved: ")
                os.makedirs(music_root+target_dir, exist_ok=True)
                full_name = music_root+target_dir
                # Set new directory name 
                name = target_dir
                os.chdir(full_name)
                to_copy = glob.glob(os.path.join(tmp_dir, '*'))

                print(f"Moving files into album directory [cyan]{name}[/cyan]...")
                for file in to_copy:
                    shutil.copy(file, full_name)
                    f = os.path.basename(file)
                    print(f"[#f5d676]{f}[/#f5d676]")
                # Clear tmp/
                shutil.rmtree(tmp_dir)
                print("[bold green]\nDone. ENTER to continue.[/bold green]")
                input()

        elif action == '7':
            # Download file 
            full_path = music_root+name
            url = input("File URL: ")
            fname = input("Name for file: ")
            print(f"Download file to [#f5d676]{fname}[/#f5d676]?")
            print("[[green]Y[/green]/n] ")
            ans = input()

            if ans.lower() in ('n', 'no'):
                continue
            else:
                print("Downloading...")
                get_album_cover(full_path, fname, url)
                print(f"Saved file as [#f5d676]{fname}[/#f5d676].")
                print("[bold green]ENTER to continue.[/bold green]")
                input()

        elif action == '8':
            # Change directory 
            os.chdir(music_root)
            print(f"Enter album directory name, or hit [bold green]'ENTER'[/bold green] for [cyan]{music}[/cyan]")
            name = input("Directory: ")

            if not name:
                full_name = music_root
            elif not check_dir_exists(music_root+name):
                print(f"[red]Directory [bold]{name}[/bold] does not exist. Check the name.[/red]")
                print("[bold green]ENTER to continue[/bold green]")
                input()
                name = ''
            else:
                full_name = music_root+name

        elif action == '9':
            # Scrub all dir names 
            scrub_dirs(music_root)
            print(f"All directory names have been scrubbed in [cyan]{music}[/cyan].")
            print("[bold green]ENTER to continue[/bold green]")
            input()

        elif action == '10':
            # Scrub file names in dir 
            scrub_filenames(full_name)
            print(f"All filenames in [cyan]{name}[/cyan] have been scrubbed.")
            print("[bold green]ENTER to continue[/bold green]")
            input()

        elif action == '11':
            # Build histogram 
            print(f"Building date histogram for [cyan]{music}[/cyan]")

            all_dates = get_all_dates(music_root)
            build_histogram(list(all_dates.values()))

            print("Histogram finished.")
            print("[bold green]ENTER to continue[/bold green]")
            input()

        elif action.lower() == 'sh':
            open_shell(full_name)

        elif action.lower() == 'q':
            print('Bye!')
            break

        else:
            continue
# End main() 


if __name__ == '__main__':
    main()
