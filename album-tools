#!/usr/bin/env python3
# album-tools
# (c) 2025 J. Adams jfa63[at]duck[dot]com
# Released under the Two-clause BSD License
#
# Colours:
# pale yellow #f5d676

__version__ = "0.1.15"
__author__ = "J. Adams jfa63[at]duck[dot]com"

from datetime import datetime
import glob
import os
import re
import readline
import shutil
import subprocess as proc
import sys

from rich import print
from rich.console import Console
from rich.panel import Panel
from rich import box
import requests
from tqdm import tqdm
import matplotlib.pyplot as plt
import yt_dlp
from yt_dlp.utils import DownloadError
from mutagen.oggopus import OggOpus
from mutagen.oggvorbis import OggVorbis
from mutagen.easyid3 import EasyID3


### -------- User settings --------###
# Set 'music_root' to the full path of your music collection directory.
# Include trailing slash
music_root = ""
# Set paths to your shell and `ffmpeg`
SHELL = "/usr/bin/bash"
FFMPEG = "/usr/bin/ffmpeg"
# Set preferred supported encoding
CODEC = "opus"
# CODEC = 'vorbis'
# CODEC = 'mp3'
### ---------------- ###

## Some needed global settings
music = os.path.basename(os.path.normpath(music_root))
try:
    os.chdir(music_root)
except FileNotFoundError:
    print("[b red]You must specify the full path to your music directory.[/]")
    print("See the README for instructions.")
    sys.exit()

tmp_dir = f"{music_root}tmp/"
# To be striped from filenames:  !"#$%&'()*+,/:;<=>?@[\]^`{|}~
disallowed_chars = re.compile(r"[^\w\s.-]")
c = Console()



## Helper Functions
def completer(text, state):
    """
    Function for readline to handle filename completion
    """
    # Expand user home (~) and environment variables
    text = os.path.expanduser(os.path.expandvars(text))
    # Append '*' to match files/directories starting with 'text'
    matches = glob.glob(text + "*")
    # Append '/' to directories
    matches = [match + "/" if os.path.isdir(match) else match for match in matches]
    try:
        return matches[state]
    except IndexError:
        return None
# End completer()

# Register completer function
readline.set_completer(completer)
# Use the tab key for completion
readline.parse_and_bind("tab: complete")


def get_files_in_dir(directory: str) -> list:
    """
    Returns a list of filenames in {directory}
    """
    file_list = []

    for root, dirs, files in os.walk(directory):
        for file in files:
            file_list.append(os.path.join(root, file))
    file_list.sort()
    return file_list
# End get_files_in_dir()


def get_all_dates(directory: str) -> dict:
    """
    Returns a dictionary of file:date tags from all files in {directory}
    """
    files = get_files_in_dir(directory)
    dates = {}

    for file in files:
        _, ext = os.path.splitext(file)
        ext = ext.lower()
        f = os.path.basename(file)

        if ext in (".opus", ".ogg", ".mp3"):
            try:
                if ext == ".opus":
                    meta = OggOpus(file)
                elif ext == ".ogg":
                    meta = OggVorbis(file)
                elif ext == ".mp3":
                    meta = EasyID3(file)
                if "date" in meta and meta["date"] and meta["date"][0].strip():
                    try:
                        dates[file] = int(meta["date"][0])
                    except ValueError:
                        print(
                            f"[yellow]Warning: Non-numeric date in {f}: {meta['date'][0]} — skipping file.[/]"
                        )
                else:
                    print(f"[yellow]Warning: No date found in {f}, skipping.[/]")
            except Exception as e:
                print(f"[b red]Error. Unable to read Date field in\n{f} [/]")
                input(f"{e}")
                continue

    return dates
# End get_all_dates()


def set_all_dates(directory: str, newdate: str):
    """
    Sets the date tag on all files in {directory}
    """
    files = get_files_in_dir(directory)

    for file in files:
        _, ext = os.path.splitext(file)
        ext = ext.lower()
        f = os.path.basename(file)

        if ext in (".opus", ".ogg", ".mp3"):
            try:
                if ext == ".opus":
                    meta = OggOpus(file)
                elif ext == ".ogg":
                    meta = OggVorbis(file)
                elif ext == ".mp3":
                    meta = EasyID3(file)

                meta["date"] = [newdate]
                meta.save()
                print("Re-wrote:")
                print(f"[#f5d676]{f}[/]")
                print("")

            except Exception as e:
                print(f"[red]Error processing {f}:[/] {e}")
# End set_all_dates()


def set_all_common(directory: str):
    """
    Set the common tags for the whole album directory.
    """

    files = get_files_in_dir(directory)
    artist = input("Artist's/band's name: ").strip()
    album = input("Album name: ").strip()
    albumartist = input(
        "Album artist: 'ENTER' to use artist's name, or type in different name: "
    ).strip()
    date = input("Recording/release date: ").strip()
    genre = input("Genre: ").strip()

    if albumartist == "":
        albumartist = artist

    name = os.path.basename(directory)

    print(f"\nDo you want to write the following tags to all files in {name}?")
    print(f"Artist/Band: {artist}")
    print(f"Album name: {album}")
    print(f"Album Artist: {albumartist}")
    print(f"Date: {date}")
    print(f"Genre: {genre}")
    print("[[green]Y[/]/n]")
    ans = input().strip()

    if ans.lower() in ("n", "no"):
        return
    else:
        for file in files:
            _, ext = os.path.splitext(file)
            ext = ext.lower()
            f = os.path.basename(file)

            if ext in (".opus", ".ogg", ".mp3"):
                try:
                    if ext == ".opus":
                        meta = OggOpus(file)
                    elif ext == ".ogg":
                        meta = OggVorbis(file)
                    elif ext == ".mp3":
                        meta = EasyID3(file)

                    meta["artist"] = [artist]
                    meta["album"] = [album]
                    meta["albumartist"] = [albumartist]
                    meta["date"] = [date]
                    meta["genre"] = [genre]
                    meta.save()
                    print("Re-wrote:")
                    print(f"[#f5d676]{f}[/]")
                    print("")
                except Exception as e:
                    print(f"[red]Error processing {f}:[/] {e}")
# End set_all_common()


def do_file_dload(directory: str, file_name: str, url: str):
    """
    Download a file such as an album cover
    """

    try:
        response = requests.get(url, stream=True)
        response.raise_for_status()
        total_size = int(response.headers.get("content-length", 0))
        file_path = os.path.join(directory, file_name)
        os.makedirs(directory, exist_ok=True)
        with (
            open(file_path, "wb") as f,
            tqdm(total=total_size, unit="B", unit_scale=True, desc=file_name) as pbar,
        ):
            for chunk in response.iter_content(chunk_size=8192):
                if chunk:
                    f.write(chunk)
                    pbar.update(len(chunk))
    except requests.RequestException as e:
        print(f"Error downloading [b]{url}[/]: {e}")
    except Exception as e:
        print(e)
# End get_album_cover()


def do_yt_dlp(
    url: str,
    output_template: str = "%(playlist_index)02d %(title)s.%(ext)s",
    ffmpeg_location: str = FFMPEG,
) -> dict:
    """
    Download an album or track with yt-dlp and encode audio as
    Ogg Opus, Ogg Vorbis, or MP3 with variable bitrate.
    """

    postprocessors = []
    ydl_opts = {
        "format": "bestaudio/best",
        "outtmpl": output_template,
        "writethumbnail": True,
        "ignore-errors": True,
        **({"ffmpeg_location": ffmpeg_location} if ffmpeg_location else {}),
        "retries": 10,
    }

    # Codec/Quality logic
    # Always start clean: remove postprocessor_args if present.
    ydl_opts.pop("postprocessor_args", None)
    codec = CODEC.lower().strip()

    if codec == "opus":
        # Opus: '-c:a libopus -b:a 192k '
        qual = "192k"
        postprocessors.append(
            {
                "key": "FFmpegExtractAudio",
                "preferredcodec": "opus",
                "preferredquality": qual,
            }
        )
        ydl_opts["postprocessor_args"] = ["-c:a", "libopus", "-b:a", qual]

    elif codec == "vorbis":
        # Vorbis VBR quality (0–10), default 6 ≈ 192 kbps VBR
        qual = "6"
        postprocessors.append(
            {
                "key": "FFmpegExtractAudio",
                "preferredcodec": "vorbis",
                "preferredquality": qual,
            }
        )
        ydl_opts["postprocessor_args"] = ["-c:a", "libvorbis"]

    elif codec == "mp3":
        # MP3: -q:a N VBR-flag, 0 is best quality VBR (LAME V0). Default '0'
        qual = "0"
        postprocessors.append(
            {
                "key": "FFmpegExtractAudio",
                "preferredcodec": "mp3",
                "preferredquality": qual,
            }
        )
        ydl_opts["postprocessor_args"] = ["-c:a", "libmp3lame", "-q:a", qual]

    else:
        print(
            f"[red]Warning: CODEC '{CODEC}' is not supported. Please set CODEC to 'opus, 'vorbis' or 'mp3' in the 'User settings' section.[/red]"
        )
        return None

    postprocessors.append({"key": "FFmpegMetadata"})
    ydl_opts["postprocessors"] = postprocessors

    with yt_dlp.YoutubeDL(ydl_opts) as ydl:
        try:
            info: dict = ydl.extract_info(url, download=True)
        except DownloadError as e:
            print(
                f"[red]yt_dlp failed to process most or all of the playlist or track for URL:\n{url}[/]\nReason: {e}"
            )
            return None

        # Filter out None entries if this is a playlist
        if info and "entries" in info and isinstance(info["entries"], list):
            info["entries"] = [e for e in info["entries"] if e]
        return info
    # End with
# End do_yt_dlp()


def set_tracknum(directory: str):
    """
    Sets the tracknumber tag on all files in {directory}
    """
    files = get_files_in_dir(directory)

    for file in files:
        fullpath, ext = os.path.splitext(file)
        basename = os.path.basename(fullpath)
        ext = ext.lower()
        track_num = basename[:2]
        # album image often starts with '00', skip
        if track_num == "00":
            continue
        # Check that first two characters are digits
        match = re.match(r"^(\d{2})", basename)
        # If so, write tracknumber tag
        if match and ext in (".opus", ".ogg", ".mp3"):
            try:
                if ext == ".opus":
                    meta = OggOpus(file)
                elif ext == ".ogg":
                    meta = OggVorbis(file)
                elif ext == ".mp3":
                    meta = EasyID3(file)

                meta["tracknumber"] = [track_num]
                meta.save()

            except Exception as e:
                print(f"[red]Error processing {file}:[/] {e}")
        elif not match:
            print(f"[yellow]{file} does not seem to start with two digits.[/]")
            print("[b green]\nENTER to continue[/]")
            input()
# End set_tracknum()


def audit_date_tags(directory: str, outpath: str = None):
    """
    Scans music files in the directory for missing or malformed date tags and writes a log file.
    """
    files = get_files_in_dir(directory)
    log_entries = []
    valid_dates = 0
    for file in files:
        _, ext = os.path.splitext(file)
        ext = ext.lower()
        f = os.path.relpath(file, directory)
        if ext in (".opus", ".ogg", ".mp3"):
            try:
                if ext == ".opus":
                    meta = OggOpus(file)
                elif ext == ".ogg":
                    meta = OggVorbis(file)
                elif ext == ".mp3":
                    meta = EasyID3(file)
                if "date" in meta and meta["date"] and meta["date"][0].strip():
                    try:
                        year = int(meta["date"][0])
                        if 1900 <= year <= 2100:
                            valid_dates += 1
                        else:
                            entry = f"Improbable year '{meta['date'][0]}' in: {f}"
                            log_entries.append(entry)
                    except ValueError:
                        entry = f"Non-numeric date '{meta['date'][0]}' in: {f}"
                        log_entries.append(entry)
                else:
                    entry = f"Missing date tag in: {f}"
                    log_entries.append(entry)
            except Exception as e:
                entry = f"[Error reading file: {f}] Reason: {e}"
                log_entries.append(entry)

    summary = [
        f"Total valid date tags: {valid_dates}",
        f"Total files with missing/malformed dates: {len(log_entries)}",
    ]

    log_body = summary + ["", "Problematic files:"] + log_entries
    log_text = "\n".join(log_body)

    if not outpath:
        stamp = (
            datetime.now()
            .replace(microsecond=0)
            .isoformat()
            .replace("-", "")
            .replace(":", "")
        )
        log_file = f"date_tag_audit_{stamp}.log"
        out_path = os.path.join(directory, log_file)

    try:
        with open(out_path, "w") as f:
            f.write(log_text)
        print(f"\n[green]Date tag audit written to:[/] [b cyan]{music}/{log_file}[/]")
        print(f"[cyan]({valid_dates} valid dates, {len(log_entries)} issues found)[/]")
    except Exception as e:
        print(f"\n[b red]Failed to write audit log:[/] {e}")
# End audit_date_tags()


def build_histogram(dates: list):
    """
    Writes a .png histogram for all unique dates (years) in /Music/
    Handles empty or corrupted input gracefully, and provides file output info.
    """
    # Ensure we have a list with integer years only
    clean_dates = []
    for d in dates:
        try:
            year = int(d)
            # Optionally filter for (reasonable) year range, e.g. 1900-2100
            if 1900 <= year <= 2100:
                clean_dates.append(year)
            else:
                print(f"[yellow]Warning: Ignoring improbable year: {d}")
        except Exception:
            print(f"[yellow]Warning: Ignoring invalid date value: {d}")

    if not clean_dates:
        print("[b red]No valid date tags found! Cannot generate histogram.[/]")
        return

    unique = len(set(clean_dates))
    n_bins = max(1, unique)

    try:
        fig, axs = plt.subplots(figsize=(6, 5), layout="constrained")
        axs.hist(clean_dates, bins=n_bins, color="#f5d676", edgecolor="#681c2c")
        axs.set_xlabel("Album Year")
        axs.set_ylabel("Count of Tracks/Files")
        axs.set_title("Histogram of Track Dates in Collection")
        stamp = (
            datetime.now()
            .replace(microsecond=0)
            .isoformat()
            .replace("-", "")
            .replace(":", "")
        )
        out_path = music_root + "/music_collection_dates-" + stamp + ".png"
        disp_path = music + "/music_collection_dates-" + stamp + ".png"
        plt.savefig(out_path)
        print(f"\n[green]Histogram saved to:[/] [b cyan]{disp_path}[/]")
        plt.close(fig)
    except Exception as e:
        print(f"\n[b red]Error during histogram generation or saving:[/] {e}")
# End build_histogram()


def scrub_dirs(root_dir: str):
    """
    Removes illegal characters from directory names.
    """
    for dirpath, dirnames, _ in os.walk(root_dir, topdown=False):
        for dirname in dirnames:
            if "thumbnails" in dirname:
                continue
            clean_name = disallowed_chars.sub("", dirname)
            suggested_new_name = clean_name.replace(" ", "_")

            if suggested_new_name != dirname:  # Check if not same name
                old_path = os.path.join(dirpath, dirname)
                new_path = os.path.join(dirpath, suggested_new_name)

                print(f"\nOld directory name: {old_path}")
                print(f"Suggested new name: {new_path}")

                print(
                    "Press Enter to accept, type a new name, or type 'skip' to leave unchanged: "
                )
                user_input = input().strip()

                if user_input.lower() == "skip":
                    continue
                elif user_input:
                    new_path = os.path.join(dirpath, user_input)

                try:
                    os.rename(old_path, new_path)
                    print(f"[green]Renamed:[/] [cyan]{old_path} → {new_path}[/]")
                except Exception as e:
                    print(f"[red]Error renaming {old_path}:[/] {e}")
# End scrub_dirs()


def scrub_filenames(a_dir: str):
    """
    Removes illegal characters from filenames
    """
    for path, dirs, files in os.walk(a_dir):
        for file in files:
            # Let's replace '(' and ')'  with  a  '-'
            o_name = file.replace("(", "-").replace(")", "-")
            # Scrub
            clean_name = disallowed_chars.sub("", o_name)
            # replace spaces  with '_'
            suggested_new_name = clean_name.replace(" ", "_")

            if suggested_new_name != file:
                old_name = os.path.join(path, file)
                old_short = os.path.basename(old_name)
                new_name = os.path.join(path, suggested_new_name)
                new_short = os.path.basename(new_name)

                try:
                    os.rename(old_name, new_name)
                    print(f"[green]Renamed:[/] [#f5d676]{old_short} → {new_short}[/]")
                except Exception as e:
                    print(f"[red]Error renaming {old_short}[/]: {e}")
# End scrub_filenames()


def open_shell(cwd):
    """
    Open an interactive shell in cwd.
    """
    os.chdir(cwd)
    # Launch an interactive shell in the current working directory
    cmd = [SHELL, "-i"]
    try:
        proc.run(cmd, check=True)
    except FileNotFoundError:
        print(f"[b red]Shell executable not found[/]: [cyan]{SHELL}[/]")
    except PermissionError:
        print(f"[b red]Permission denied[/] when launching: [cyan]{SHELL}[/]")
    except proc.CalledProcessError as e:
        print(f"[b yellow]Shell exited with code[/] [magenta]{e.returncode}[/]")
    except Exception as e:
        print(f"[b red]Unexpected error launching shell[/]: [white]{e}[/]")
    # Pause so the user can read the error before the terminal clears
    print("[b green]Enter to return to the menu[/]")
    input()
# End open_shell()


## main
def main():
    os.system("clear")
    # Welcome screen 
    print(f"[b #f5d676 u]Welcome to Album Tools v{__version__}![/]\n")
    print(
        f"Enter album directory name, or hit [b green]'ENTER'[/] for [cyan]{music}/[/]"
    )
    name = input("Directory: ").strip()
    full_name = music_root + name

    # Sanity check 
    if not name:
        full_name = music_root
        name = music + "/"
    elif not os.path.isdir(music_root + name):
        print(f"Directory [cyan]{name}[/] does not exist. Using [cyan]{music}[/]")
        print("[green]ENTER to continue[/]")
        input()
        full_name = music_root
        name = music + "/"

    # Menu loop
    while True:
        os.system("clear")

        # The menu lines are justified as they are to be
        # displayed in the terminal 
        main_menu = f"""
  [#f5d676]Current Album Directory:[/]
  [cyan]{name}[/]

   [b #f5d676]1[/] = [b]List files[/] in current directory
   [b #f5d676]2[/] = [b]Get dates[/] for all current tracks
   [b #f5d676]3[/] = [b]Set date[/] on all current tracks
   [b #f5d676]4[/] = [b]Set track number[/] on all current tracks
   [b #f5d676]5[/] = [b]Set common tags[/] on all current tracks
   [b #f5d676]6[/] = [b]Scrub all filenames[/] in current directory
   [b #f5d676]7[/] = [b]Download album[/] or track ([u #90ee90]with postprocessing[/])
   [b #f5d676]8[/] = [b]Download file[/]|cover art ([u #ff7f7f]no postprocessing[/])
   [b #f5d676]9[/] = [b]Change directory[/] in [cyan]{music}/[/]
  [b #f5d676]10[/] = [b]Create new directory[/] in [cyan]{music}/[/]
  [b #f5d676]11[/] = [b]Scrub all directory names[/] in [cyan]{music}/[/]
  [b #f5d676]12[/] = [b]Generate date histogram[/] for [cyan]{music}/[/] collection
  [b #f5d676]13[/] = [b]Audit date tags[/] in [cyan]{music}/[/] collection
  [b #f5d676]sh[/] = [#90ee90]Open shell[/]
   [b #f5d676]q[/] = [b u #ff7f7f]Quit[/]\n
        """

        c.print(
            Panel(main_menu, title=f"[b #f5d676]Album Tools v{__version__}[/]", box=box.ROUNDED)
        )

        ## Action prompt
        action = input(">> ").strip()
        os.system("clear")

        ## Action choices
        if action == "1":
            # List files in dir
            ls = get_files_in_dir(full_name)
            print("")
            print(f"[b blue]{len(ls)} files in {name}:[/]")

            for file in ls:
                f = os.path.basename(file)
                print(f"[#f5d676]{f}[/]")

            print("[b green]\nENTER to return to menu[/]")
            input()

        elif action == "2":
            # List dates for all tracsk in dir
            all_dates = get_all_dates(full_name)
            print(f"[b blue]\nDates in {music}/{name}[/]")
            for file, date in all_dates.items():
                f = os.path.basename(file)
                print(f"[b white]{date}: [/] [#f5d676]{f}[/]")
            print("[b green]\nENTER to return to menu[/]")
            input()

        elif action == "3":
            # Set dates on all tracks
            if full_name == music_root:
                print("[b red]Don't change the dates of all files in /Music/![/]")
                print("[b green]\nENTER to go back to menu[/]")
                input()
                continue

            print("[yellow]Enter new date (YYYY)[/]")
            new = input(": ").strip()
            print(f"You have chosen to change this album's date to {new}")
            print(f"All tracks in [cyan]{name}[/] will have the date field modified.")
            print("[b]Continue?[/] [[green]Y[/]/n]")
            ans = input().strip()

            if ans.lower() in ("n", "no"):
                continue
            else:
                print(f"Changing dates in {music}/{name}")
                set_all_dates(full_name, new)
                all_dates = get_all_dates(full_name)
                print(f"\nAll dates in {name} changed to {new}.")
                print("[b green]\nENTER to return to menu[/]")
                input()

        elif action == "4":
            # Set track number field
            print(
                f"[yellow]All tracks in[/] [cyan]{name}[/] [yellow]whose file names start with a[/]"
            )
            print(
                "[yellow]two-digit number will have that number written to the track number[/]"
            )
            print("[yellow]field.[/] [b]Continue?[/] [[green]Y[/]/n]")
            ans = input().strip()
            if ans.lower() in ("n", "no"):
                continue
            else:
                set_tracknum(full_name)
                print("[b green]\nENTER to return to menu[/]")
                input()

        elif action == "5":
            # Set common tags
            set_all_common(full_name)
            print("[b green]\nENTER to return to menu[/]")
            input()

        elif action == "6":
            # Scrub file names in dir
            scrub_filenames(full_name)
            print(f"\nAll filenames in [cyan]{name}[/] have been scrubbed.")
            print("[b green]ENTER to return to menu[/]")
            input()

        elif action == "7":
            # Download album or track
            print("[yellow]Album/Playlist URL[/]")
            url = input(": ").strip()
            print(
                f"\n[yellow]Download album/track?[/] (Will be staged in [cyan]{music}/tmp/[/])"
            )
            print("[[b green]Y[/]/n]")
            ans = input().strip()

            if ans.lower() in ("n", "no"):
                continue
            else:
                os.makedirs(f"{music_root}tmp/", exist_ok=True)
                os.chdir(tmp_dir)
                print("[b green]Downloading...[/]")
                do_yt_dlp(url)

                # Set tracknumber in ID3 metadata
                with c.status("\n[b #f5d676]Setting track number ID3 tags[/]"):
                    set_tracknum(tmp_dir)
                print("[b green]\nDownload complete. ENTER to continue[/]")
                input()

            # Make all dirs under music_root visible
            os.chdir(music_root)
            # Move dloaded files into album directory
            print(
                "[yellow]Do you wish create an album directory for these downloaded files?[/]"
            )
            print("[[green]Y[/]/n]")
            move_files = input().strip()

            if move_files.lower() in ("no", "n"):
                print(f"\nLeaving downloaded files in [cyan]{tmp_dir}[/]")
                print("[yellow]You will want to move them before downloading again.[/]")
                print("[b green]ENTER to continue[/]")
                input()
                continue
            else:
                print("\n[yellow]Name of directory to which the files will be moved[/]")
                target_dir = input(": ").strip()
                os.makedirs(music_root + target_dir, exist_ok=True)
                full_name = music_root + target_dir

                # Set new directory name
                if not target_dir:
                    name = f"{music}"
                else:
                    name = target_dir

                os.chdir(full_name)
                to_copy = glob.glob(os.path.join(tmp_dir, "*"))

                print(f"Moving files into album directory [cyan]{name}[/]")
                for file in to_copy:
                    shutil.copy(file, full_name)
                    f = os.path.basename(file)
                    print(f"[#f5d676]{f}[/]")
                # Clear tmp/
                shutil.rmtree(tmp_dir)
                print("[b green]\nDone. ENTER to return to menu.[/]")
                input()

        elif action == "8":
            # Download file
            full_path = music_root + name
            url = input("File URL: ").strip()
            fname = input("Name for file: ").strip()
            print(f"[yellow]Download file to[/] [#f5d676]{fname}[/]?")
            print("[[green]Y[/]/n]")
            ans = input().strip()

            if ans.lower() in ("n", "no"):
                continue
            else:
                print("[green]Downloading...[/]")
                do_file_dload(full_path, fname, url)
                print(f"Saved file as [#f5d676]{fname}[/].")
                print("[b green]ENTER to return to menu.[/]")
                input()

        elif action == "9":
            # Change directory
            os.chdir(music_root)
            print(
                f"[yellow]Enter album directory name, or hit[/] [b green]'ENTER'[/] [yellow]for[/] [cyan]{music}[/]"
            )
            name = input("Directory: ").strip()

            if not name:
                full_name = music_root
                name = music + "/"
            elif not os.path.isdir(music_root + name):
                print(f"[red]Directory [b]{name}[/] does not exist. Check the name.[/]")
                print("[b green]ENTER to return to menu[/]")
                input()
                name = music + "/"
            else:
                full_name = music_root + name

        elif action == "10":
            # Make new dir
            print(f"[yellow]Create a new directory under[/] [cyan]{music}[/]")
            print("New directory name: ")
            dirname = input().strip()

            fulldir = f"{music_root}/{dirname}"
            print("[b yellow]Create?[/]")
            print("[[green]Y[/]/n]")
            ans = input().strip()

            if ans.lower() in ("n", "no"):
                continue
            else:
                os.makedirs(fulldir, exist_ok=True)
                print(
                    f"\n[b green]Created[/] [b cyan]{fulldir}[/], [b green]ENTER to continue[/]"
                )
                input()

        elif action == "11":
            # Scrub all dir names
            print(f"\n[yellow]Scrubbing all directory names in[/] [cyan]{music}[/].")
            scrub_dirs(music_root)
            print(f"\nAll directory names have been scrubbed in [cyan]{music}[/].")
            print("[b green]ENTER to return to menu[/]")
            input()

        elif action == "12":
            # Build histogram
            with c.status(f"[yellow]Building date histogram for[/] [cyan]{music}[/]"):
                os.chdir(music_root)
                all_dates = get_all_dates(music_root)
                build_histogram(list(all_dates.values()))
            print("\n[b green]ENTER to return to menu[/]")
            input()

        elif action == "13":
            # Audit date tags and write log
            with c.status(
                    f"[yellow]Auditing date tags in[/] [cyan]{music}/[/] [yellow]collection[/]"
            ):
                audit_date_tags(music_root)
            print("[b green]\nENTER to return to menu[/]")
            input()

        elif action.lower() == "sh":
            open_shell(full_name)

        elif action.lower() == "q":
            print("Bye!")
            break

        else:
            continue
# End main()


if __name__ == "__main__":
    main()
