#!/usr/bin/env python3
# album_tools.py 
# (c) 2025 J. Adams jfa63[at]duck[dot]com  
# Released under the Two-clause BSD License    

import glob
import os
import re
import readline
import shutil
import subprocess as proc
import sys

from collections import Counter
from datetime import datetime

import matplotlib.pyplot as plt
from matplotlib import colors
from matplotlib.ticker import PercentFormatter

from mutagen.oggvorbis import OggVorbis
from mutagen.mp3 import MP3
from mutagen.id3 import ID3, TDRC
from mutagen.easyid3 import EasyID3



## Set the global values 
# Set 'music_root' to your music collection directory. 
music_root = "~/Music/"
os.chdir(music_root)
tmp_dir = music_root+"tmp/"
BASH = '/usr/bin/bash'
RIP = '~/bin/rip_tmp'
WGET = '/usr/bin/wget'
YTD = '/usr/bin/yt-dlp'

disallowed_chars = re.compile(r"[^\w\s.-]")


# Function for readline to handle filename completion 
def completer(text, state):
    # Expand user home (~) and environment variables
    text = os.path.expanduser(os.path.expandvars(text))
    # Append '*' to match files/directories starting with 'text'
    matches = glob.glob(text + '*')
    # Append '/' to directories  
    matches = [match + '/' if os.path.isdir(match) else match for match in matches]
    try:
        return matches[state]
    except IndexError:
        return None
# End completer() 

# Register completer function
readline.set_completer(completer)
# Use the tab key for completion
readline.parse_and_bind('tab: complete')



## Helper Functions 
def get_files_in_dir(directory: str) -> list:
    """
    Returns a list of filenames in {directory}
    """
    file_list = []

    for root, dirs, files in os.walk(directory):
        for file in files:
            file_list.append(os.path.join(root, file))
    file_list.sort()
    return file_list
# End get_files_in_dir() 


def check_dir_exists(directory: str) -> bool:
    """
    Does {directory} exist?
    """
    return os.path.isdir(directory)
# End check_dir_exists() 


def get_unique_dates(dates: list) -> int:
    """
    Returns the number of unique dates for the histogram
    """
    unique_dates = set(dates)
    return len(unique_dates) 
# End get_unique_dates() 


def get_all_dates(directory: str) -> dict:
    """
    Returns a dictionary of file:date tags from all files in {directory}
    """
    files = get_files_in_dir(directory)
    dates = {}
    
    for file in files:
        _, ext = os.path.splitext(file)
        try:
            if ext == '.ogg':
                meta = OggVorbis(file)
            elif ext == '.mp3':
                meta = EasyID3(file)
            ndate = meta['date']
            dates[os.path.basename(file)] = int(ndate[0])
        except:
            continue

    return dates
# End get_all_dates() 


def set_all_dates(directory: str, newdate: str):
    """
    Sets the date tag on all files in {directory}
    """
    files = get_files_in_dir(directory)

    for file in files:
        _, ext = os.path.splitext(file)
        ext = ext.lower()

        try:
            if ext == '.ogg':
                meta = OggVorbis(file)
            elif ext == '.mp3':
                meta = EasyID3(file)

            meta['date'] = [newdate]
            meta.save()
            print("Re-wrote:")
            print(file)
            print("")

        except Exception as e:
            print(f"Error processing {file}: {e}")
# End set_all_dates() 


def set_all_common(directory: str):
    """
    Set the common tags for the whole album directory.
    """

    files = get_files_in_dir(directory)
    artist = input("Artist's/band's name: ")
    album = input("Album name: ")
    albumartist = input("Album artist: 'ENTER' to use artist's name, or type in different name: ")
    date = input("Recording/release date: ")
    genre = input("Genre: ")

    if albumartist == '':
        albumartist = artist

    name = os.path.basename(directory)

    print(f"\nDo you want to write the following tags to all files in {name}?")
    print(f"Artist/Band: {artist}")
    print(f"Album name: {album}")
    print(f"Album Artist: {albumartist}")
    print(f"Date: {date}")
    print(f"Genre: {genre}")
    ans = input("\n[y/N]")

    if ans.lower() == 'n':
        return
    elif ans.lower() == 'y':
        for file in files:
            _, ext = os.path.splitext(file)
            ext = ext.lower()

            try:
                if ext == '.ogg':
                    meta = OggVorbis(file)
                elif ext == '.mp3':
                    meta = EasyID3(file)

                meta['artist'] = [artist]
                meta['album'] = [album]
                meta['albumartist'] = [albumartist]
                meta['date'] = [date]
                meta['genre'] = [genre]
                meta.save()
                print("Re-wrote:")
                print(file)
                print("")
            except Exception as e:
                print(f"Error processing {file}: {e}")
    else:
        return
# End set_all_common() 


def get_album_cover(directory: str, file_name: str, url: str):
    """
    Download a file such as an album cover
    """

    try:
        proc.run([WGET, '-O', directory+'/'+file_name, url])
    except ChildProcessError as e:
        print(e)
    except Exception as e:
        print(e)
# End get_album_cover() 


def do_yt_dlp(url: str):
    """
    Download an album or track with `yt-dlp`
    """

    try:
        proc.run([YTD, '-P', tmp_dir, url])
    except ChildProcessError as e:
        print(e)
    except Exception as e:
        print(e)
# End do_yt_dlp() 


def do_batch_rip():
    """
    Re-encode /Musci/tmp/* as Ogg Vorbis
    """

    try:
        proc.run([BASH, RIP, tmp_dir])
    except ChildProcessError as e:
        print("In album_tools")
        print(e)
    except Exception as e:
        print("In album_tools")
        print(e)
# End do_batch_rip() 


def build_histogram(dates: list):
    """
    Writes a .png histogram for all unique dates in /Music/
    """
    unique = get_unique_dates(dates)
    N_points = unique//2
    n_bins = unique

    fig, axs = plt.subplots(figsize=(5, 5), layout='constrained')
    plt.xlabel = "Album Years"
    axs.hist(dates, bins=n_bins)
    axs.set_xlabel("Album Years")
    stamp = datetime.now().replace(microsecond=0).isoformat().replace('-','').replace(':','')
    plt.savefig(music_root+'music_collection_dates-'+stamp+'.png')
# End build_histogram() 


def scrub_dirs(root_dir: str):
    """
    Removes illegal characters from directory names.
    """
    for dirpath, dirnames, _ in os.walk(root_dir, topdown=False):
        for dirname in dirnames:
            if "thumbnails" in dirname:
                continue
            clean_name = disallowed_chars.sub('', dirname) 
            suggested_new_name = clean_name.replace(' ', '_')
            
            if suggested_new_name != dirname: # Check if not same name 
                old_path = os.path.join(dirpath, dirname)
                new_path = os.path.join(dirpath, suggested_new_name)

                print(f"\nOld directory name: {old_path}")
                print(f"Suggested new name: {new_path}")

                user_input = input("Press Enter to accept, type a new name, or type 'skip' to leave unchanged: ").strip()

                if user_input.lower() == 'skip':
                    continue
                elif user_input:
                    new_path = os.path.join(dirpath, user_input)

                try:
                    os.rename(old_path, new_path)
                    print(f"Renamed: {old_path} → {new_path}")
                except Exception as e:
                    print(f"Error renaming {old_path}: {e}")
# End scrub_dirs() 


def scrub_filenames(a_dir: str):
    """
    Removes ilegal characters from filenames
    """
    for path, dirs, files in os.walk(a_dir):
        for file in files:
            # Let's replace ( and ) 
            o_name = file.replace('(','-').replace(')','-')
            # Scrub 
            clean_name = disallowed_chars.sub('', o_name) 
            # replace spaces 
            suggested_new_name = clean_name.replace(' ', '_')
            
            if suggested_new_name != file:
                old_name = os.path.join(a_dir, file)
                new_name = os.path.join(a_dir, suggested_new_name)

                print(f"\nOld file name: {old_name}")
                print(f"Suggested new name: {new_name}")

                user_input = input("Press Enter to accept, type a new name, or type 'skip' to leave unchanged: ").strip()

                if user_input.lower() == 'skip':
                    continue
                elif user_input:
                    new_name = os.path.join(a_dir, user_input)

                try:
                    os.rename(old_name, new_name)
                    print(f"Renamed: {old_name} → {new_name}")
                except Exception as e:
                    print(f"Error renaming {old_name}: {e}")
# End scrub_filenames() 


def open_shell():
    """
    Open an interactive shell in cwd.
    """

    try:
        proc.run([BASH, '-i'])
    except ChildProcessError as e:
        print("In album_tools")
        print(e)
    except Exception as e:
        print("In album_tools")
        print(e)
# End open_shell() 


## main 
def main():
    # Register completer function
    readline.set_completer(completer)
    # Use the tab key for completion
    readline.parse_and_bind('tab: complete')

    os.system('clear')
    print("Welcome to Album Tools!\n")
    print("Enter album directory name, or hit 'ENTER' for /Music/")
    name = input("Directory: ")
    full_name = music_root+name

    if not check_dir_exists(full_name):
        print(name+" does not exist. Using /Music/")
        name = ''
        full_name = music_root

    # Menu loop 
    while True:
        os.system('clear')
        print("Album Tools")
        print("Choose:")
        print(f" 1 = List files in '{name}' directory")
        print(f" 2 = Get dates for all tracks in '{name}' directory")
        print(f" 3 = Set date on all tracks in '{name}' directory")
        print(" 4 = Set common tags for current album")
        print(" 5 = Create new directory in /Music/")
        print(" 6 = Download album or track")
        print(" 7 = Download album cover or other file")
        print(" 8 = Change directory in /Music/")
        print(" 9 = Scrub all directory names in /Music/")
        print(f"10 = Scrub all filenames in '{name}' directory")
        print("11 = Generate date histogram for collection")
        print("sh = Open shell") 
        print(" q = Quit\n")

        action = input("/Music/"+name+"> ")

        if action == '1':
            # List files in dir 
            ls = get_files_in_dir(full_name)
            print("")
            print(f"{len(ls)} files in {name}:")
            for f in ls:
                print(os.path.basename(f))
            input("\nENTER to continue")

        elif action == '2':
            # List dates for all tracsk in dir 
            all_dates = get_all_dates(full_name)
            print("Dates in /Music/"+name)
            for f, d in all_dates.items():
                print(f"{f}: {d}")
            input("\nENTER to continue")

        elif action == '3':
            # Set dates on all tracks 
            if full_name == music_root:
                print("Don't change the dates of all files in /Music/!")
                input("\nENTER to continue")
                continue
            new = input("Enter new date (YYYY): ")
            print("You have chosen to change this album's date to "+new)
            ans = input("Continue? [y/N]")
            if ans.lower() == 'y':
                print("Changing dates in /Music/"+name)
                set_all_dates(full_name, new)
                all_dates = get_all_dates(full_name)
                print(f"All dates in {name} changed to {new}.")
                input("\nENTER to continue")
            else:
                input("\nAborting. ENTER to continue.")
                continue

        elif action == '4':
            # Set common tags 
            set_all_common(full_name)
            input("\nENTER to continue")

        elif action == '5':
            # Make new dir 
            print("Create a new directory under /Music/")
            dirname = input("New directory name: ")
            fulldir = music_root+"/"+dirname
            ans = input("Create? [y/N] ")

            if ans.lower() == 'y':
                os.mkdir(fulldir)
                input("\nCreated "+fulldir, "ENTER to continue")

        elif action == '6':
            # Download album with `yt-dlp` 
            url = input("Album URL: ")
            print(f"Download album to {music_root}tmp/?")
            ans = input("[y/N] ")

            if ans.lower() == 'y':
                if not check_dir_exists(music_root+"tmp/"):
                    os.mkdir(music_root+"tmp/")
                print("Downloading...")
                do_yt_dlp(url)
                input("\nAlbum download complete")
            else:
                break

            print(f"Re-encode tracks in {music_root}tmp/ as Ogg Vorbis?")
            ans2 = input("[Y/n] ")

            if ans2.lower() == 'n':
                break
            elif ans2.lower() == 'y':
                print("Ripping to Ogg Vorbis...")
                do_batch_rip()
                print("Re-encoding complete.")
                target_dir = input("\nName of directory to which the files will be moved: ")

                if not check_dir_exists(music_root+target_dir):
                    os.mkdir(music_root+target_dir)

                full_name = music_root+target_dir
                name = target_dir
                to_copy = glob.glob(os.path.join(tmp_dir, '*.ogg'))

                print(f"Moving files into album directory {name}...")
                for ogg in to_copy:
                    shutil.copy(ogg, full_name)
                    print(ogg)
                # Clear tmp/ 
                shutil.rmtree(tmp_dir)
                input("\nDone. ENTER to contiue.")
            else:
                print("\nSkipping re-encoding. Leaving downloaded files in /Music/tmp/")
                input("ENTER to contiue.") 

        elif action == '7':
            # Download file 
            full_path = music_root+name
            url = input("File URL: ")
            fname = input("Name for file: ")
            print(f"Download file to {full_path}/{fname}?")
            ans = input("[y/N] ")

            if ans.lower() == 'y':
                print("Downloading...")
                get_album_cover(full_path, fname, url)
                print(f"Saved file as {fname}.")
                input("ENTER to continue.")

        elif action == '8':
            # Change directory 
            old_name = name
            name = input("Directory: ")

            if not name:
                full_name = music_root
            elif not check_dir_exists(music_root+name):
                print(f"Directory {name} does not exist. Check the name.")
                input("ENTER to continue")
                #full_name = music_root
                name = ''
            else:
                full_name = music_root+name

        elif action == '9':
            # Scrub all dir names 
            scrub_dirs(music_root)
            print(f"All directory names have been scrubbed in {music_root}.")
            input("ENTER to continue")

        elif action == '10':
            # Scrub file names in dir 
            scrub_filenames(full_name)
            print(f"All filenames in {name} have been scrubbed.")
            input("ENTER to continue")

        elif action == '11':
            # Build histogram 
            print("Building date histogram for /Music/")

            all_dates = get_all_dates(music_root)
            build_histogram(all_dates)

            print("Histogram finished.")
            input("ENTER to continue")

        elif action.lower() == 'sh':
            open_shell()

        elif action.lower() == 'q':
            print('Bye!')
            break

        else:
            continue
# End main() 


if __name__ == '__main__':
    main()
